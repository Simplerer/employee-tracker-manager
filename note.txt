insert into ..... set id= -, name= -, role= -, etc;


delete from ..... WHERE id= -;

update ..... set name = - WHERE id = -;
     -with no where, updates all rows



switch(type) {
     case 'sasfasfas': {
          what happens
          break
     }
     case 'sasfasfas': {
          what happens
          break
     }
     case 'sasfasfas': {
          what happens
          break
     }
    
}

prompt options
-view all departments    -
-view all roles          -
-view all employees      -
-add a department        -
-add a role              -
-add an employee   f l name, role, manager
-update employee role update role


bonus prompts
-update employee manager
-view employess by manager
-view employess by department
- delete departments, roles, and employees
-view combined salaries of all employees in department (view total utilized budget)


job titles, department, and salary should come from role_id

manager should come from manager_id

to compile all the relative data, a premade class may be halpful
employee class






const insert = (table, data) => {
     db.query('Insert INTO ?? SET ?', [table, data], (err) => {
          if (err) return console.error(err);
          console.log('success');
     });
};





const selectallnameandvalue = (table, data, value) => {
     return db.promise().query('SELECT ?? AS name, ?? AS value FROM ??', [name, value, table]);
}

async () => {
     const [roles] = await selectall....('role','title','id')
}
put into brackets to only get the data back


const selectallemployees = async () => {
     const statement = 'select ydadadada'
     const [employees] = await db.promise().query(statement);
     console.table(employees);
}

use oreoared Statements

async and await can not be used in global scope



SUM WILL BE USED FOR SALARY
